<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" []>
<topic id="stcan_struct" xml:lang="en-us">
  <title>STCAN_MSG Structure</title>
  <prolog>
    <author>Ratnadip Choudhury</author>
    <copyright>
      <copyryear year="2011"/>
      <copyrholder>ROBERT BOSCH ENGINEERING AND BUSINESS SOLUTIONS LIMITED</copyrholder>
    </copyright>
    <metadata>
      <keywords>
        <indexterm>STCAN_MSG Structure</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>STCAN_MSG Structure Definition</p>
    <codeblock>struct STCAN_MSG
{
    unsigned int  m_unMsgID;     // 11/29 Bit- Message ID
    unsigned char m_ucEXTENDED;  // true, for (29 Bit) Frame
    unsigned char m_ucRTR;       // true, for Remote Request
    unsigned char m_ucDLC;       // Data len (0..8)
    union 
          {
                  unsigned char      m_aucData[8];  // Byte Data
                  unsigned short int m_auwData[4];  // Word Data
                  unsigned long  int m_aulData[2];  // Long Data
          } m_sWhichBit;         // Data access member
     unsigned char m_ucChannel;
};</codeblock>
    <p>Required Include header file is struct.h</p>
    <example>
      <codeblock>STCAN_MSG sMsg;

// Initialise message structure
sMsg.m_unMsgID = 0x100;              // Message ID
sMsg.m_ucEXTENDED = FALSE;           // Standard Message type
sMsg.m_ucRTR = FALSE;                // Not RTR type
sMsg.m_ucDLC = 8;                    // Length is 8 Bytes
sMsg.m_sWhichBit.m_aulData[0] = 10;  // Lower 4 Bytes
sMsg.m_sWhichBit.m_aulData[1] = 20;  // Upper 4 Bytes
sMsg.m_ucChannel = 1;                // First CAN channel

// Send the message
SendMsg(sMsg);</codeblock>
    </example>
    <p>SCAN_ERR Structure Definition</p>
    <codeblock>struct SCAN_ERR
{
    unsigned char m_ucTcError;      // Tx Error Counter Value
    unsigned char m_ucRxError;      // Rx Error Counter Value
    unsigned char m_ucChannel;      // Channel Nember
};</codeblock>
    <p>Required Include header file is struct.h</p>
    <example>
      <codeblock>// Error Active Handler which will print error counter values and channel number
void OnError_Active(SCAN_ERR ErrorMsg)
{
  Trace( &quot;Tx Error: %d Rx Error: %d Channel: %d&quot;,
         ErrorMsg.m_ucTxError,
         ErrorMsg.m_ucRxError,
         ErrorMsg.m_ucRxError );
}</codeblock>
    </example>
    <p>Accessing database message signal values</p>
    <p>Database message structures can be meaningfully interpreted. Database message structures will have signal members as defined in the database. Signal raw value can be directly assigned by using member of database message structure with the signal name.</p>
    <example>CAN_Request is a database message that has signals Sig1, Sig2 and Sig3. Each signal is 2 bytes of length. To assign raw value of a signal use message name structure and use signal name as member.<codeblock>// Message Declaration
CAN_Request sMsgStruct = { 0x100, 0, 0, 8, { 0, 0, 0, 0, 0, 0, 0, 0 } };

// Use signal member

// Sig1
sMsgStruct.m_sWhichBit.Sig_1 = 10;

// Sig2
sMsgStruct.m_sWhichBit.Sig_2 = 20;

// Sig3
sMsgStruct.m_sWhichBit.Sig_3 = 30;

// Send the message now
SendMsg(sMsgStruct);</codeblock></example>
    <note>Right click on edit area of function editor. Select &quot;Insert Message&quot; or &quot;Insert Signal&quot; option to insert message structure or signal structure. Select the option &quot;Yes, I want to declare selected message structure variable&quot; option in the &quot;Message and Signal List&quot; to initialise message with its struct definition.</note>
    <p>Required Include header file Unions.h</p>
    <note>
      <ul>
        <li>Unions.h file will be automatically generated by BUSMASTER during database import.</li>
        <li>This file will be in the database file directory</li>
      </ul>
    </note>
  </body>
</topic>
